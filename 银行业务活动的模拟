#include<iostream>
#include<stdlib.h>
#include<time.h>
#include<queue>         //队列容器 ,队列中存放customers[1,2..N]的下标 
#define max 500         //假设银行一天最多接待 500 位客户 
#define num 4          //银行可办理业务的窗口数 
#define work 30          //客户的业务处理时间最大值(最小值为1)

using namespace std;

typedef struct thetime
{
	int h;   //小时 
	int m;   //分钟 
}thetime;

typedef struct customer
{
	thetime arrive_time;          //到达银行时间 
	thetime start_time;           //开始办理业务的时间 
	thetime end_time;             //结束时间 
	thetime wait_time;            //等待时间 
	thetime business_time;        //业务处理时间(假设业务处理时间为1分钟的整数倍 且 不低于一个小时) 
	thetime timing;               //客户在银行的逗留时间 ( 结束时间减去到达时间 ) 
}cus,customers[max+1];

typedef struct window             //银行四个窗口的排队队列 
{
	queue < int > window;
}win[num+1];

void people1(customer customers[],int i)                 //生成一位客户的到达时间、业务办理时间、不用排队情况下的开始时间和结束时间 
{
	int h=0,m=0;
	customers[i].arrive_time.h=9+rand()%9;               //生成到达时间 
    customers[i].arrive_time.m=rand()%60;
    
	while(customers[i].arrive_time.h==17 && customers[i].arrive_time.m!=0)
	{
        customers[i].arrive_time.h=9+rand()%9;
        customers[i].arrive_time.m=rand()%60;
	}
	
	customers[i].start_time = customers[i].arrive_time;       //先令开始时间等于到达时间 
	
	customers[i].business_time.h=0;                 //生成客户的业务处理时间（1~30分钟）
	customers[i].business_time.m = 1 + rand()% work;

	if(customers[i].start_time.m + customers[i].business_time.m >=60 )   //计算在不排队的情况下的结束时间 
	{
		customers[i].end_time.h = customers[i].start_time.h + 1;
		customers[i].end_time.m = customers[i].start_time.m + customers[i].business_time.m-60;
	}
	else
	{
		customers[i].end_time.h = customers[i].start_time.h;
		customers[i].end_time.m = customers[i].start_time.m + customers[i].business_time.m;
	}
} 

void input1(customer customers[],int i)                //输入客户的到达时间及办理业务的时间 
{
	customer cus;
	cout<<"请输入客户的到达时间(如11:11输入的格式为  11 11  ; 00:00~17:00):"<<endl;
	cin>>cus.arrive_time.h>>cus.arrive_time.m;
	
	cout<<"请输入客户的办理业务的时长(如15分钟输入的格式为  15  ; 最快1分钟，最长30分钟):"<<endl;
	cus.business_time.h=0;
	cin>>cus.business_time.m;
	
	if(cus.arrive_time.h <0 || cus.arrive_time.h >=17 || cus.business_time.h!=0 || cus.business_time.m<1 ||cus.business_time.m>30)
	{
		cout<<"输入有误，请重新输入"<<endl<<endl;
		input1(customers,i);
	}
	else
	{
		customers[i].arrive_time=cus.arrive_time;
		customers[i].business_time=cus.business_time;
	}
}

void people2(customer customers[],int i)                 //输入一位客户的到达时间、业务办理时间、计算在不用排队情况下的开始时间和结束时间 
{
	input1(customers,i);                     //输入到达时间以及办理业务的时长 
	if(customers[i].arrive_time.h<9)         //先令开始时间等于到达时间 (09:00之前到达的客户的开始时间置为09:00)
	{
		customers[i].start_time.h=9;
		customers[i].start_time.m=0;
	}
	else customers[i].start_time = customers[i].arrive_time;

	if(customers[i].start_time.m + customers[i].business_time.m >=60 )   //计算在不排队的情况下的结束时间 
	{
		customers[i].end_time.h = customers[i].start_time.h + 1;
		customers[i].end_time.m = customers[i].start_time.m + customers[i].business_time.m-60;
	}
	else
	{
		customers[i].end_time.h = customers[i].start_time.h;
		customers[i].end_time.m = customers[i].start_time.m + customers[i].business_time.m;
	}
}

float sojourn(customer customers[],int i)                   //求客户逗留时间  ( 客户的结束时间减去到达时间 )
{
	customers[i].timing.h=customers[i].end_time.h-customers[i].arrive_time.h;
	if(customers[i].end_time.m<customers[i].arrive_time.m)
	{
		customers[i].timing.m=60+customers[i].end_time.m-customers[i].arrive_time.m;
		customers[i].timing.h-=1;
	}
	else customers[i].timing.m=customers[i].end_time.m-customers[i].arrive_time.m;
	return (customers[i].timing.m + customers[i].timing.h*60 );
}

void sort(int N,customer customers[])                         //按照客户到达时间进行从小到大的排序 (排序后 customers[0,1..N].arrive_time 依次增大)
{
	int i,j;
	for(i=1;i<=N;i++)
	{
		for(j=1;j<=N-i;j++)
		{
			if(customers[j].arrive_time.h > customers[j+1].arrive_time.h || \
			(customers[j].arrive_time.h == customers[j+1].arrive_time.h && \
			customers[j].arrive_time.m > customers[j+1].arrive_time.m))
			{
				customers[0]=customers[j];
				customers[j]=customers[j+1];
				customers[j+1]=customers[0];
			}
		}
	}
}

int compare(win &w,customer customers[])              //比较哪个队列的等待时间最少 ( 返回此队列的下标 )
{
	int i,t,text; 
	
	for(i=1;i<=num;i++)
	{
		while(w[i].window.empty()) return i;
	}
	for(i=1,text=1;i<=num;i++) 
	{
		if(customers[w[i].window.back()].end_time.h < customers[w[text].window.back()].end_time.h || \
		
		(customers[w[i].window.back()].end_time.h == customers[w[text].window.back()].end_time.h && \
		
		customers[w[i].window.back()].end_time.m < customers[w[text].window.back()].end_time.m )) text=i;
	}
	return text;
}

void insertqueue(win &w,customer customers[],int N)              //客户按先后顺序入队和出队 (先检查是否有要出队的元素，再排在等待时间最少的队列里)
{
	int i,j,k,b;                            //b表示compare函数返回的等待时间最少的队列的下标 
	for(i=1;i<=N;i++)                       //循环customers[1,2..N]
	{
		for(j=1;j<=num;j++)
		{
			while(!w[j].window.empty() && (customers[i].arrive_time.h > customers[w[j].window.front()].end_time.h || \
			(customers[i].arrive_time.h == customers[w[j].window.front()].end_time.h && \
			customers[i].arrive_time.m >= customers[w[j].window.front()].end_time.m)))                  //结束业务的客户出队 (离开时不按先后次序)
			{
				cout<<"客户"<<w[j].window.front()<<"离开了"<<j<<"号窗口"<<endl<<endl;
				w[j].window.pop();
			}
		}
        b=compare(w,customers);                             //令b等于结束时间最早的数组的下标 
		if(w[b].window.empty())                        //将此客户的下标( 入队 ) 且 计算开始时间、等待时间和结束时间 
		{
			customers[i].wait_time.h=0;
			customers[i].wait_time.m=0;
			w[b].window.push(i);
		}
		else if(!w[b].window.empty())
		{
			if(customers[w[b].window.back()].end_time.h > customers[i].arrive_time.h && \
			customers[w[b].window.back()].end_time.m < customers[i].arrive_time.m)                    //计算等待时间 
			{
				customers[i].wait_time.m = customers[w[b].window.back()].end_time.m - customers[i].arrive_time.m +60 ;
				customers[i].wait_time.h = customers[w[b].window.back()].end_time.h - customers[i].arrive_time.h -1 ;
			}
			else
			{
				customers[i].wait_time.h=customers[w[b].window.back()].end_time.h-customers[i].arrive_time.h;
			    customers[i].wait_time.m=customers[w[b].window.back()].end_time.m-customers[i].arrive_time.m; 
			}
			
		    customers[i].end_time.h = customers[i].arrive_time.h + customers[i].business_time.h + customers[i].wait_time.h + \
			((customers[i].arrive_time.m + customers[i].business_time.m + customers[i].wait_time.m) / 60);                         //计算结束时间 
		    customers[i].end_time.m = (customers[i].arrive_time.m + customers[i].business_time.m + customers[i].wait_time.m)%60;
			
			customers[i].start_time.h=customers[w[b].window.back()].end_time.h;                                     //计算开始时间 
			customers[i].start_time.m=customers[w[b].window.back()].end_time.m;
			w[b].window.push(i);
		}
		
		cout<<"<----------------------------------------->"<<endl<<endl;
		if(customers[i].start_time.h > 17 ||(customers[i].start_time.h==17 && customers[i].start_time.m>=0))
		{
			cout<<"客户"<<i<<"被告知在银行下班前无法办理业务,故离开银行"<<endl<<endl; 
		}
		else
		{
			cout<<"客户"<<i<<"访问"<<b<<"号窗口"<<endl<<endl;
			cout<<"此时窗口的分布情况为:"<<endl<<endl;
			for(k=1;k<=num;k++)
			{
				cout<<"窗口"<<k<<": "<<w[k].window.size()<<"\t";
			    if(!w[k].window.empty()) cout<<"队尾客户结束时间:"<<customers[w[k].window.back()].end_time.h<<":"<<customers[w[k].window.back()].end_time.m<<endl<<endl;
		    	else cout<<"可随时访问此窗口"<<endl<<endl;
			}
		}
		
	}
}

void leave(customer customers[],int N)
//对银行关门时间到了，还在办理的客户允许继续办理完业务再离开，还在排队的进马上离开(开始时间、办理时间、结束时间、等待时间、逗留时间全部置为0)
{
	int i;
	for(i=1;i<=N;i++)
	{
		if(customers[i].start_time.h > 17 ||(customers[i].start_time.h==17 && customers[i].start_time.m>=0))
		{
			customers[i].business_time.h=0;  customers[i].business_time.m=0;
			customers[i].timing.h=0;  customers[i].timing.m=0;
		}
	}
}

void input2(int &N)                  //输入客户的数量 
{
	cin>>N;
	if(N<1 || N>500)
	{
		cout<<"输入的客户数量不符合要求，请重新输入;"<<endl;
		input2(N);
	}
}

void operate1(customer customers[])             //仅仅需要输入一天内的客户数量，生成时间随机数进行模拟 
{
	int i,N;
	cout<<endl<<"请输入银行一天的客户数: ";         //输入银行一天的客户数
	input2(N);
	for(i=1;i<=N;i++) people1(customers,i);     //生成一位客户的到达时间、业务办理时间 

	sort(N,customers);      //客户按先来后到进行排序

	win w1;                        //银行四个窗口的排队队列 
    insertqueue(w1,customers,N);
    for(i=1;i<num+1;i++)
    {
        while(!w1[i].window.empty())
        {
        	cout<<"客户"<<w1[i].window.front()<<"离开了"<<i<<"号窗口"<<endl<<endl;
        	w1[i].window.pop();
		}
	}
    
    float add1,average1,add2,average2;       //计算每位客户在银行的逗留时间
    for(i=1;i<=N;i++)
	{
	    add1+=sojourn(customers,i);
	    add2+=customers[i].business_time.m + 60*customers[i].business_time.h;
	} 
	average1=add1/N;            //今日客户的平均逗留时间 
	average2=add2/N;
	
    leave(customers,N);       //对银行关门时间到了，还在排队的客户逗留时间置为0 

	/****************************     输出客户的关键时间点     ****************************/
	for(i=1;i<=N;i++)
	{
		if(customers[i].start_time.h > 17 ||(customers[i].start_time.h==17 && customers[i].start_time.m>=0))
		{
			cout<<"客户"<<i<<"无法在今日办理业务"<<endl<<endl; 
		}
		else
		{
			cout<<"<--------------------- 客户"<<i<<" --------------------->"<<endl<<endl;
		    cout<<"到达时间: "<<customers[i].arrive_time.h<<":"<<customers[i].arrive_time.m<<"\t";                //输出客户的到达时间 
	    	cout<<"开始时间: "<<customers[i].start_time.h<<":"<<customers[i].start_time.m<<"\t";                  //输出客户的开始时间 
			cout<<"结束时间: "<<customers[i].end_time.h<<":"<<customers[i].end_time.m<<endl<<endl;                //输出客户的结束时间 
			cout<<"等待时间: "<<customers[i].wait_time.h<<":"<<customers[i].wait_time.m<<"\t";                    //输出客户的等待时间 
			cout<<"所用时间: "<<customers[i].business_time.h<<":"<<customers[i].business_time.m<<"\t";            //输出客户办理业务的时间
			cout<<"逗留时间: "<<customers[i].timing.h<<":"<<customers[i].timing.m<<endl<<endl;                    //输出客户在银行的逗留时间 
		}
	}
		cout<<"--------------------------------"<<endl<<endl;
		cout<<"客户办理业务的平均时间: "<<average2<<"分钟"<<endl<<endl;     //输出客户在银行办理业务的平均时间 
		cout<<"客户的平均逗留时间: "<<average1<<"分钟"<<endl<<endl;         //输出客户在银行的平均逗留时间 
		cout<<"--------------------------------"<<endl<<endl;

}

void operate2(customer customers[])               //需要输入各个用户的到达时间和办理业务的时间，利用给定的时间进行模拟 
{
	int i,N;
	cout<<endl<<"请输入银行一天的客户数: ";
	input2(N);
	for(i=1;i<=N;i++) people2(customers,i);     //输入一位客户的到达时间、业务办理时间、计算在不用排队情况下的开始时间和结束时间 
	sort(N,customers);
	win w2;
    insertqueue(w2,customers,N);               //客户按先后顺序入队和出队 (先检查是否有要出队的元素，再排在等待时间最少的队列里)
    for(i=1;i<num+1;i++)                       //输出客户 i 入队前离开银行的客户序号 
    {
        while(!w2[i].window.empty())
        {
        	cout<<"客户"<<w2[i].window.front()<<"离开了"<<i<<"号窗口"<<endl<<endl;
        	w2[i].window.pop();
		}
	}
	float add1,average1,add2,average2;
    for(i=1;i<=N;i++)
	{
	    add1+=sojourn(customers,i);
	    add2+=customers[i].business_time.m + 60*customers[i].business_time.h;
	} 
	average1=add1/N;            //今日客户的平均逗留时间 
	average2=add2/N;
	
    leave(customers,N);       //对银行关门时间到了，还在排队的客户逗留时间置为0 
  
	/****************************     输出客户的关键时间点     ****************************/
	for(i=1;i<=N;i++)
	{
		if(customers[i].start_time.h > 17 ||(customers[i].start_time.h==17 && customers[i].start_time.m>=0))
		{
			cout<<"客户"<<i<<"无法在今日办理业务"<<endl<<endl; 
		}
		else
		{
			cout<<"<--------------------- 客户"<<i<<" --------------------->"<<endl<<endl;
		    cout<<"到达时间: "<<customers[i].arrive_time.h<<":"<<customers[i].arrive_time.m<<"\t";                //输出客户的到达时间 
	    	cout<<"开始时间: "<<customers[i].start_time.h<<":"<<customers[i].start_time.m<<"\t";                  //输出客户的开始时间 
			cout<<"结束时间: "<<customers[i].end_time.h<<":"<<customers[i].end_time.m<<endl<<endl;                //输出客户的结束时间 
			cout<<"等待时间: "<<customers[i].wait_time.h<<":"<<customers[i].wait_time.m<<"\t";                    //输出客户的等待时间 
			cout<<"所用时间: "<<customers[i].business_time.h<<":"<<customers[i].business_time.m<<"\t";            //输出客户办理业务的时间
			cout<<"逗留时间: "<<customers[i].timing.h<<":"<<customers[i].timing.m<<endl<<endl;                    //输出客户在银行的逗留时间 
		}
	}
		cout<<"--------------------------------"<<endl<<endl;
		cout<<"客户办理业务的平均时间: "<<average2<<"分钟"<<endl<<endl;     //输出客户在银行办理业务的平均时间 
		cout<<"客户的平均逗留时间: "<<average1<<"分钟"<<endl<<endl;         //输出客户在银行的平均逗留时间 
	    cout<<"--------------------------------"<<endl<<endl;
}

int main()
{
	int i;
	customer customers1[max+1],customers2[max+1];
	srand((unsigned)time(NULL));
	cout<<"<**********************************************************************************>"<<endl;
	cout<<"<**************************   银行上班时间为9:00~17:00   **************************>"<<endl;
	while(1)
	{
		cout<<"输入1，则仅仅需要再输入一天内的客户数量，生成时间随机数进行模拟 "<<endl<<endl;
		cout<<"输入2，则需要先输入客户总数,再输入各个用户的到达时间和办理业务的时间，利用给定的时间进行模拟 "<<endl<<endl;
		cout<<"输入3或其他，则结束整个程序 "<<endl<<endl;
		cin>>i;
		switch(i)
		{
			case 1:	operate1(customers1); break;
		
			case 2:	operate2(customers2); break;
		
			case 3: return 0;
		
			default : return 0;
		}
	}
}
